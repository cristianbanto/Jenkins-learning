pipeline {
    agent any

    environment {
        REPO_DIR = "${JENKINS_HOME}/workspace/${JOB_NAME}/repo"
    }

    parameters {
        booleanParam(
            defaultValue: false,
            description: 'If you choose this option the resources will be deleted',
            name: 'Terraform_destroy'
        )
        choice(
            choices: ['us-east-1', 'us-west-2', 'eu-west-1'],  
            description: 'Select AWS region',
            name: 'AWS_REGION'
        )
    }  

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Clone or Update Git Repository') {
            steps {
                script {
                    // Verifică dacă repo-ul există deja
                    def repoExists = fileExists(REPO_DIR)

                    if (repoExists) {
                        // Dacă există, actualizează cu git pull
                        sh "cd ${REPO_DIR} && git pull"
                    } else {
                        // Dacă nu există, clonare inițială
                        sh "mkdir -p ${REPO_DIR}"
                        sh "git clone https://github.com/cristianbanto/Jenkins-learning.git ${REPO_DIR}"
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    // Specifică directorul cu fișierele Terraform
                    def terraformDir = "${JENKINS_HOME}/workspace/${JOB_NAME}/repo/terraform/"

                    // Navighează în directorul Terraform
                    dir(terraformDir) {
                        // Initializează Terraform
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    // Specifică directorul cu fișierele Terraform
                    def terraformDir = "${JENKINS_HOME}/workspace/${JOB_NAME}/repo/terraform/"

                    // Navighează în directorul Terraform
                    dir(terraformDir) {
                        // Aplică schimbările cu Terraform
                            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            sh 'echo "Terraform plan"'
                            sh 'terraform plan'
                        }
                    }
                }
            }
        }        

        stage('Terraform Apply') {
            steps {
                script {
                    // Specifică directorul cu fișierele Terraform
                    def terraformDir = "${JENKINS_HOME}/workspace/${JOB_NAME}/repo/terraform/"

                    // Navighează în directorul Terraform
                    dir(terraformDir) {
                        // Aplică schimbările cu Terraform
                            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            sh 'echo "Terraform plan first"'
                            sh 'terraform plan'
                            sh "terraform apply -auto-approve -var 'region=${params.AWS_REGION}'"
                        }
                    }
                }
            }
        }

        stage('Terraform Destroy if case was checked') {
            when {
                expression { params.Terraform_destroy == true }
            }    
            steps {
                script {
                    echo "Destroying Terraform resources..."
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    } 
}
